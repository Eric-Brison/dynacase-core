<?php
/*
 * @author Anakeen
 * @package FDL
*/

namespace Dcp\Pu;
/**
 * Test class for _REPORT.
 * Generated by PHPUnit on 2011-09-05 at 14:26:32.
 */

require_once 'PU_testcase_dcp_action.php';

class TestReport extends TestCaseDcpAction
{
    
    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass();
        self::connectUser();
        self::beginTransaction();
        self::importDocument("FamilyAll_element.csv");
        self::importDocument("documents_rapport.csv");
        /*import twice : there links between documents*/
        self::importDocument("documents_rapport.csv");
    }
    
    public function setUp()
    {
        // no call parent
        $this->setUpTestAction("FDL", "REPORT_EXPORT_CSV");
    }
    
    public function tearDown()
    {
        $this->resetCurrentParameters();
        // no call parent
        
    }
    
    public static function tearDownAfterClass()
    {
        
        TestSuiteDcp::addMessage(sprintf("\nResult data for %s written in file://%s.\n", __CLASS__, self::getOutputDir()));
        self::rollbackTransaction();
    }
    /**
     * Test report with default option
     */
    public function testDefaultReport()
    {
        $this->requiresCoreParamEquals('CORE_LANG', 'fr_FR');
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('numericRender', 'raw');
        
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("default_report.csv") , $csvContent);
    }
    /**
     * Test report with kind pivot, and pivot == all_element_text
     */
    public function testPivotCustomPivotReport()
    {
        $this->requiresCoreParamEquals('CORE_LANG', 'fr_FR');
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('kind', 'pivot');
        $this->setCurrentParameters('pivot', 'all_element_text');
        $this->setCurrentParameters('numericRender', 'raw');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("pivot_allelement_report.csv") , $csvContent);
    }
    /**
     * Test report with custom CSV export
     */
    public function testCustomCSVOption()
    {
        $this->requiresCoreParamEquals('CORE_LANG', 'fr_FR');
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('delimiter', '"');
        $this->setCurrentParameters('enclosure', ',');
        $this->setCurrentParameters('encoding', 'UTF-8');
        $this->setCurrentParameters('numericRender', 'raw');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("customCSV_report.csv") , $csvContent);
    }
    /**
     * Test report with custom date format
     */
    public function testCustomDateFormat()
    {
        $this->requiresCoreParamEquals('CORE_LANG', 'fr_FR');
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('dateFormat', 'ISO');
        $this->setCurrentParameters('numericRender', 'raw');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__ . "_ISO", $csvContent);
        $this->assertEquals($this->readExampleFile("dateISO_report.csv") , $csvContent, "ISO DATE");
        $this->setCurrentParameters('dateFormat', 'FR');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__ . "_FR", $csvContent);
        $this->assertEquals($this->readExampleFile("dateFR_report.csv") , $csvContent, "FR DATE");
    }
    /**
     * Test report with custom date format
     */
    public function testDecimalSeparator()
    {
        $this->requiresCoreParamEquals('CORE_LANG', 'fr_FR');
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('decimalSeparator', '%');
        $this->setCurrentParameters('numericRender', 'raw');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("decimalSeparator_report.csv") , $csvContent);
    }
    
    private function readExampleFile($fileName)
    {
        $csvFile = 'DCPTEST/' . $fileName;
        $content = file_get_contents($csvFile);
        return $content;
    }
    
    private static function getOutputDir()
    {
        $tmpdir = getTmpDir();
        $subdir = $tmpdir . "/PU_Report/";
        if (!is_dir($subdir)) {
            mkdir($subdir);
        }
        return $subdir;
    }
    
    private function saveReport($testName, $content)
    {
        $testName = str_replace(":", "_", $testName);
        $testName = str_replace('\\', "_", $testName);
        $csvFile = sprintf('%s/csv_%s.csv', $this->getOutputDir() , $testName);
        $fp = fopen($csvFile, 'w');
        fwrite($fp, $content);
        fclose($fp);
    }
}
?>
