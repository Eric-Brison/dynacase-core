#!/bin/bash

set -e

if [ -z "$wpub" ]; then
    echo "Undefined or empty wpub environment variable!"
    exit 1
fi

if [ -z "$pgservice_core" ]; then
    echo "Undefined or empty pgservice_core!"
    exit 1
fi

PGSERVICE="$pgservice_core" psql --set ON_ERROR_STOP=on -f "$wpub"/FDL/fdl.sql
PGSERVICE="$pgservice_core" psql --set ON_ERROR_STOP=on -f - << 'SQL'

DROP TRIGGER IF EXISTS  tfldrel on fld;
DROP FUNCTION if exists reldocfld();
DROP FUNCTION if exists getreldocfld();
ALTER TABLE docread add column fromname text;
ALTER TABLE doc add column fromname text;

CREATE OR REPLACE FUNCTION pg_temp.deleteAllViews(IN _schema TEXT)
    RETURNS void
    LANGUAGE plpgsql
    AS
    $$
    DECLARE
        row     record;
    BEGIN
        FOR row IN
            SELECT
                table_schema,
                table_name
            FROM
                information_schema.views
            WHERE
                table_schema = _schema
        LOOP
            EXECUTE 'DROP VIEW ' || quote_ident(row.table_schema) || '.' || quote_ident(row.table_name);
            RAISE INFO 'Drop View: %', quote_ident(row.table_schema) || '.' || quote_ident(row.table_name);
        END LOOP;
    END;
$$;

SELECT pg_temp.deleteAllViews('family');

ALTER TABLE IF EXISTS public.docfam set schema family;
ALTER TABLE if exists family.docfam rename to families;
ALTER TABLE IF EXISTS public.doc set schema family;
ALTER TABLE if exists family.doc rename to documents;
update family.documents set fromname = family.families.name from family.families where family.families.id= family.documents.fromid;
update docread set fromname = family.families.name from family.families where family.families.id= docread.fromid;

CREATE OR REPLACE FUNCTION pg_temp.renameFamilyTable()
    RETURNS void
    LANGUAGE plpgsql
    AS
    $$
    DECLARE
        row     record;
    BEGIN
        FOR row IN
            select table_schema, table_name, lower(docfam.name) as famname from (
SELECT table_schema, table_name, substring(table_name from 4)::int as famid FROM information_schema.tables WHERE  table_schema = 'public' and table_name ~ '^doc[1-9]') as z, docfam where z.famid=docfam.id

        LOOP

            EXECUTE 'alter table ' || quote_ident(row.table_schema) || '.' || quote_ident(row.table_name)
                || ' set schema family';
            EXECUTE 'alter table family.' || quote_ident(row.table_name) || ' rename to ' || quote_ident(row.famname);
            RAISE INFO 'Move: %', quote_ident(row.table_schema) || '.' || quote_ident(row.table_name) || ' to family.' || quote_ident(row.famname);
        END LOOP;
    END;
$$;


SQL
RET=$?
if [ $RET -ne 0 ]; then
    echo "Error adding column rules to table style."
    exit $RET
fi

exit 0
